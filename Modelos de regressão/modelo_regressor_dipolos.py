# -*- coding: utf-8 -*-
"""Dipolo_Rede_Neural.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/117OEKVzGY6FQs5nuwdkFHMVPbzXfbx1r
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV

from sklearn.metrics import mean_squared_error  
from sklearn.multioutput import MultiOutputRegressor
from sklearn.preprocessing import StandardScaler

df=pd.read_excel('BW_SMA_database1.xlsx')
data=df.copy()
x=data.drop(labels=['BW','f'],axis=1)
y=data[['BW','f']]

X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=200)

X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=200)
std = StandardScaler()
X_train_std = std.fit_transform(X_train)
X_test_std = std.transform(X_test)
Y_train_std = std.fit_transform(y_train)
Y_test_std = std.transform(y_test)

mlp=MLPRegressor()
param_grid={'hidden_layer_sizes':[(20,20,20,20,20,20)],'max_iter':[5000],'activation':['tanh','relu','logistic'],'solver':['adam','sgd'],
            'learning_rate_init': [0.001,0.01,0.1]}

grid = GridSearchCV(estimator=mlp, param_grid=param_grid,
scoring='neg_mean_squared_error', cv=7, verbose=0)

grid.fit(X_train_std, Y_train_std)

grid.best_estimator_ #BW

Y_pred = grid.best_estimator_.predict(X_test_std)
Y_pred=std.inverse_transform(Y_pred)
msq_err = mean_squared_error(y_test, Y_pred)
print("Mean Squared Error: {}".format(msq_err))